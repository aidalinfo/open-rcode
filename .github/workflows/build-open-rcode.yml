name: Build and Release Open-rcode

on:
  push:
      branches:
        - main
      paths:
        - 'apps/open-rcode/package.json'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: open-rcode

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(grep '"version"' apps/open-rcode/package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git tag -l "v${{ steps.version.outputs.version }}" | grep -q "v${{ steps.version.outputs.version }}"; then
            echo "Tag v${{ steps.version.outputs.version }} already exists, stopping CI"
            exit 1
          fi
          echo "Tag v${{ steps.version.outputs.version }} does not exist, continuing"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./apps/open-rcode
        run: pnpm install

      - name: Build Nuxt application
        working-directory: ./apps/open-rcode
        env:
          NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
        run: pnpm build

      - name: Create build archives
        working-directory: ./apps/open-rcode
        run: |
          # Create deployment directory structure
          mkdir -p deployment-package
          cp -r .output deployment-package/
          cp package.json deployment-package/
          cp nuxt.config.ts deployment-package/
          
          # Create ZIP archive
          cd deployment-package
          zip -r ../open-rcode-${{ steps.version.outputs.version }}.zip .
          
          # Create TAR.GZ archive
          tar -czf ../open-rcode-${{ steps.version.outputs.version }}.tar.gz .
          
          cd ..
          ls -la *.zip *.tar.gz

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ steps.version.outputs.tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/open-rcode
          file: ./apps/open-rcode/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NUXT_UI_PRO_LICENSE=${{ secrets.NUXT_UI_PRO_LICENSE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create and push tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.tag }}"
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        uses: ncipollo/create-release@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## Release Notes for ${{ steps.version.outputs.tag }}
            
            ### What's included
            - üì¶ **Docker Image**: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
            - üóúÔ∏è **ZIP Archive**: `open-rcode-${{ steps.version.outputs.version }}.zip` - Ready-to-deploy build files
            - üìÇ **TAR.GZ Archive**: `open-rcode-${{ steps.version.outputs.version }}.tar.gz` - Ready-to-deploy build files
            
            ### Deployment without Docker
            1. Download either the ZIP or TAR.GZ archive
            2. Extract the files
            3. Install dependencies: `npm install --production`
            4. Set your environment variables
            5. Start the application: `node .output/server/index.mjs`
            
            ### Docker Deployment
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ```
            
            Built from commit: ${{ github.sha }}
          artifacts: ./apps/open-rcode/open-rcode-${{ steps.version.outputs.version }}.zip,./apps/open-rcode/open-rcode-${{ steps.version.outputs.version }}.tar.gz
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}
