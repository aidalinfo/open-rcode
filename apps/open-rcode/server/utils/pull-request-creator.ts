import type { BaseContainerManager } from './container/base-container-manager'
import { EnvironmentModel } from '../models/Environment'
import { UserModel } from '../models/User'
import { TaskModel } from '../models/Task'
import { TaskMessageModel } from '../models/TaskMessage'
import { generateInstallationToken, getInstallationRepositories } from './github-app'
import { v4 as uuidv4 } from 'uuid'
import { AIExecutor } from './ai-executor'
import { logger } from './logger'

export class PullRequestCreator {
  private containerManager: BaseContainerManager

  constructor(containerManager: BaseContainerManager) {
    this.containerManager = containerManager
  }

  async createFromChanges(containerId: string, task: any, summary: string): Promise<void> {
    try {
      logger.info({ taskId: task._id }, 'Creating pull request for task')

      const environment = await EnvironmentModel.findById(task.environmentId)
      if (!environment) {
        throw new Error(`Environment ${task.environmentId} not found`)
      }

      const workspaceDir = task.workspaceDir || `/tmp/workspace/${environment.repository || 'openrcode'}/repo`

      const user = await UserModel.findOne({ githubId: task.userId })
      if (!user) {
        throw new Error(`User ${task.userId} not found`)
      }

      const hasChanges = await this.checkForChanges(containerId, workspaceDir)
      if (!hasChanges) {
        await TaskMessageModel.create({
          id: uuidv4(),
          userId: task.userId,
          taskId: task._id,
          role: 'assistant',
          content: 'üìù **Aucune modification d√©tect√©e** - Pas de Pull Request cr√©√©e'
        })
        return
      }

      const branchName = `open-rcode-task-${task._id}-${Date.now()}`

      await this.createBranchAndCommit(containerId, workspaceDir, branchName, task, summary)

      // Obtenir le git diff des changements
      const gitDiff = await this.getGitDiff(containerId, workspaceDir, environment.defaultBranch || 'main')

      // Demander √† Gemini de sugg√©rer un titre pour la PR
      let prTitle = task.title || 'Automated Task Completion'

      // Toujours utiliser Gemini pour sugg√©rer un titre bas√© sur le diff
      const claudeExecutor = new AIExecutor(this.containerManager)
      const geminiPrompt = `Bas√© sur les modifications suivantes (git diff), sugg√®re un titre concis et descriptif pour une pull request (maximum 72 caract√®res). R√©ponds uniquement avec le titre, sans explication ni formatage suppl√©mentaire.

Git diff:
${gitDiff}

Contexte de la t√¢che: ${task.title || 'Automated task completion'}`

      try {
        const titleSuggestion = await claudeExecutor.executeCommand(
          containerId,
          geminiPrompt,
          workspaceDir,
          'admin-gemini',
          'gemini-2.5-flash'
        )

        // Nettoyer la r√©ponse de Gemini
        prTitle = this.extractTitleFromGeminiResponse(titleSuggestion)

        await TaskMessageModel.create({
          id: uuidv4(),
          userId: task.userId,
          taskId: task._id,
          role: 'assistant',
          content: `ü§ñ **Titre sugg√©r√© par Gemini:** ${prTitle}`
        })
      } catch (error) {
        logger.error({ error, taskId: task._id }, 'Error getting title suggestion from Gemini')
        // Continuer avec le titre par d√©faut en cas d'erreur
        await TaskMessageModel.create({
          id: uuidv4(),
          userId: task.userId,
          taskId: task._id,
          role: 'assistant',
          content: `‚ö†Ô∏è **Impossible d'obtenir un titre sugg√©r√© par Gemini, utilisation du titre par d√©faut**`
        })
      }

      const githubToken = await this.getGitHubToken(user, environment.repositoryFullName)

      if (!githubToken) {
        await this.handleNoToken(task)
        return
      }

      await this.pushBranch(containerId, workspaceDir, branchName, environment.repositoryFullName, githubToken)

      const prUrl = await this.createGitHubPullRequest(
        environment.repositoryFullName,
        branchName,
        prTitle,
        summary,
        githubToken,
        environment.defaultBranch || 'main'
      )

      await TaskMessageModel.create({
        id: uuidv4(),
        userId: task.userId,
        taskId: task._id,
        role: 'assistant',
        content: `‚úÖ **Pull Request cr√©√©e avec succ√®s!**
        
**Branche:** \`${branchName}\`
**Repository:** ${environment.repositoryFullName}

Les modifications ont √©t√© pouss√©es et une Pull Request a √©t√© cr√©√©e automatiquement.`
      })

      await TaskMessageModel.create({
        id: uuidv4(),
        userId: task.userId,
        taskId: task._id,
        role: 'assistant',
        content: prUrl,
        type: 'pr_link'
      })

      // Stocker l'URL de la PR dans le mod√®le Task
      await TaskModel.findByIdAndUpdate(task._id, {
        pr: prUrl,
        updatedAt: new Date()
      })

      logger.info({ taskId: task._id, prUrl }, 'Pull request created successfully')

      // Auto-merge si activ√©
      if (task.autoMerge) {
        await this.autoMergePullRequest(prUrl, environment.repositoryFullName, githubToken, task)
      }
    } catch (error) {
      logger.error({ error, taskId: task._id }, 'Error creating pull request')

      await TaskMessageModel.create({
        id: uuidv4(),
        userId: task.userId,
        taskId: task._id,
        role: 'assistant',
        content: `‚ùå **Erreur lors de la cr√©ation de la PR:** ${(error as any).message}`
      })
    }
  }

  private async checkForChanges(containerId: string, workspaceDir: string): Promise<boolean> {
    const script = `
      cd "${workspaceDir}"
      git config --global --add safe.directory "${workspaceDir}" || true
      git status --porcelain
    `

    const result = await this.containerManager.executeInContainer({
      containerId,
      command: ['bash', '-c', script],
      user: 'root'
    })

    const porcelainOutput = result.stdout.trim()
    return !!porcelainOutput
  }

  private async getGitDiff(containerId: string, workspaceDir: string, baseBranch: string): Promise<string> {
    const script = `
      cd "${workspaceDir}"
      git config --global --add safe.directory "${workspaceDir}" || true
      # Obtenir le diff complet des changements par rapport √† la branche de base
      git diff ${baseBranch}...HEAD --no-color || true
    `

    const result = await this.containerManager.executeInContainer({
      containerId,
      command: ['bash', '-c', script],
      user: 'root'
    })

    if (result.exitCode !== 0) {
      logger.error({ exitCode: result.exitCode, stderr: result.stderr }, 'Git diff failed')
      return ''
    }

    // Limiter la taille du diff pour √©viter des prompts trop longs
    const maxDiffLength = 5000
    if (result.stdout.length > maxDiffLength) {
      return result.stdout.substring(0, maxDiffLength) + '\n... (diff tronqu√©)'
    }

    return result.stdout
  }

  private async createBranchAndCommit(
    containerId: string,
    workspaceDir: string,
    branchName: string,
    task: any,
    summary: string
  ): Promise<void> {
    const script = `
      cd "${workspaceDir}"
      
      git checkout -b "${branchName}"
      git add .
      
      git commit -m "$(cat <<'EOF'
feat: ${task.title || 'Automated task completion'}

${summary.replace(/'/g, '\'')}

ü§ñ Generated with open-rcode automation
EOF
)"
    `

    const result = await this.containerManager.executeInContainer({
      containerId,
      command: ['bash', '-c', script],
      user: 'root'
    })

    if (result.exitCode !== 0) {
      throw new Error(`Git commit failed with exit code ${result.exitCode}: ${result.stderr}`)
    }
  }

  private async getGitHubToken(user: any, repositoryFullName: string): Promise<string | null> {
    if (!user.githubAppInstallationIds?.length) return null

    for (const installationId of user.githubAppInstallationIds) {
      try {
        const installationRepos = await getInstallationRepositories(installationId)
        const hasRepository = installationRepos.repositories.some(
          (repo: any) => repo.full_name === repositoryFullName
        )

        if (hasRepository) {
          return await generateInstallationToken(installationId)
        }
      } catch (error) {
        logger.warn({ error, installationId }, 'Error checking installation')
        continue
      }
    }

    return null
  }

  private async handleNoToken(task: any): Promise<void> {
    await TaskMessageModel.create({
      id: uuidv4(),
      userId: task.userId,
      taskId: task._id,
      role: 'assistant',
      content: `‚ö†Ô∏è **Modifications pr√™tes mais PR non cr√©√©e automatiquement**
      
Les modifications ont √©t√© faites dans le conteneur mais ne peuvent pas √™tre pouss√©es automatiquement car aucun token GitHub valide n'est disponible.

Pour cr√©er une PR manuellement, installez la GitHub App sur ce repository.`
    })
  }

  private async pushBranch(
    containerId: string,
    workspaceDir: string,
    branchName: string,
    repositoryFullName: string,
    githubToken: string
  ): Promise<void> {
    const script = `
      cd "${workspaceDir}"
      git remote set-url origin "https://x-access-token:${githubToken}@github.com/${repositoryFullName}.git"
      git push origin "${branchName}"
    `

    const result = await this.containerManager.executeInContainer({
      containerId,
      command: ['bash', '-c', script],
      user: 'root'
    })

    if (result.exitCode !== 0) {
      throw new Error(`Git push failed with exit code ${result.exitCode}: ${result.stderr}`)
    }
  }

  private async createGitHubPullRequest(
    repoFullName: string,
    branchName: string,
    title: string,
    body: string,
    token: string,
    baseBranch: string = 'main'
  ): Promise<string> {
    const [owner, repo] = repoFullName.split('/')

    const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${token}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title,
        head: branchName,
        base: baseBranch,
        body: `${body}

ü§ñ This PR was created automatically by open-rcode after executing a Claude-powered task.`,
        maintainer_can_modify: true
      })
    })

    if (!response.ok) {
      const errorData = await response.json()
      throw new Error(`GitHub API error: ${response.status} - ${errorData.message || 'Unknown error'}`)
    }

    const prData = await response.json()
    logger.info({ prUrl: prData.html_url, repo: `${owner}/${repo}` }, 'GitHub pull request created')
    return prData.html_url
  }

  private extractTitleFromGeminiResponse(response: string): string {
    // Nettoyer la r√©ponse de Gemini
    let cleanedResponse = response.trim()

    // Enlever les √©ventuels marqueurs de formatage
    cleanedResponse = cleanedResponse.replace(/^#+\s*/g, '') // Enlever les headers markdown
    cleanedResponse = cleanedResponse.replace(/^\*+\s*/g, '') // Enlever les bullets
    cleanedResponse = cleanedResponse.replace(/^-+\s*/g, '') // Enlever les tirets
    cleanedResponse = cleanedResponse.replace(/^["'`]+|["'`]+$/g, '') // Enlever les guillemets

    // Si la r√©ponse contient plusieurs lignes, prendre seulement la premi√®re
    const lines = cleanedResponse.split('\n').filter(line => line.trim())
    if (lines.length > 0) {
      cleanedResponse = lines[0].trim()
    }

    // Extraire le texte entre "R√©ponse:" ou similaire si pr√©sent
    const responseMatch = cleanedResponse.match(/(?:r√©ponse|response|titre|title):\s*(.+)/i)
    if (responseMatch) {
      cleanedResponse = responseMatch[1].trim()
    }

    // Limiter √† 72 caract√®res
    if (cleanedResponse.length > 72) {
      cleanedResponse = cleanedResponse.substring(0, 69) + '...'
    }

    // Retourner le titre par d√©faut si le r√©sultat est vide ou trop court
    if (!cleanedResponse || cleanedResponse.length < 5) {
      return 'Automated Task Completion'
    }

    return cleanedResponse
  }

  private async autoMergePullRequest(
    prUrl: string,
    repoFullName: string,
    token: string,
    task: any
  ): Promise<void> {
    try {
      logger.info({ taskId: task._id, prUrl }, 'Starting auto-merge for pull request')

      // Extraire le num√©ro de PR de l'URL
      const prNumber = prUrl.match(/pull\/(\d+)/)?.[1]
      if (!prNumber) {
        throw new Error('Could not extract PR number from URL')
      }

      const [owner, repo] = repoFullName.split('/')

      // Attendre quelques secondes pour que les checks se lancent
      await new Promise(resolve => setTimeout(resolve, 5000))

      // R√©cup√©rer les informations de la PR
      const prResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}`, {
        headers: {
          Authorization: `token ${token}`,
          Accept: 'application/vnd.github.v3+json'
        }
      })

      if (!prResponse.ok) {
        throw new Error(`Failed to get PR info: ${prResponse.status}`)
      }

      const prData = await prResponse.json()

      // V√©rifier si la PR peut √™tre merg√©e
      if (!prData.mergeable) {
        await TaskMessageModel.create({
          id: uuidv4(),
          userId: task.userId,
          taskId: task._id,
          role: 'assistant',
          content: `‚ö†Ô∏è **Auto-merge impossible:** La PR a des conflits ou ne peut pas √™tre merg√©e automatiquement.`
        })
        return
      }

      // Merger la PR
      const mergeResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls/${prNumber}/merge`, {
        method: 'PUT',
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          commit_title: `Merge pull request #${prNumber} from ${prData.head.ref}`,
          commit_message: `Auto-merged by open-rcode\n\n${prData.title}`,
          merge_method: 'merge' // ou 'squash' ou 'rebase' selon la pr√©f√©rence
        })
      })

      if (mergeResponse.ok) {
        await TaskModel.findByIdAndUpdate(task._id, {
          merged: true,
          updatedAt: new Date()
        })

        await TaskMessageModel.create({
          id: uuidv4(),
          userId: task.userId,
          taskId: task._id,
          role: 'assistant',
          content: `üéâ **Pull Request merg√©e automatiquement!**
          
La PR #${prNumber} a √©t√© merg√©e avec succ√®s dans la branche principale.`
        })

        logger.info({ taskId: task._id, prNumber }, 'Pull request auto-merged successfully')
      } else {
        const errorData = await mergeResponse.json()
        throw new Error(`Merge failed: ${errorData.message || 'Unknown error'}`)
      }
    } catch (error) {
      logger.error({ error, taskId: task._id }, 'Error auto-merging pull request')

      await TaskMessageModel.create({
        id: uuidv4(),
        userId: task.userId,
        taskId: task._id,
        role: 'assistant',
        content: `‚ùå **Erreur lors du merge automatique:** ${(error as any).message}
        
La PR a √©t√© cr√©√©e mais n√©cessite un merge manuel.`
      })
    }
  }
}
